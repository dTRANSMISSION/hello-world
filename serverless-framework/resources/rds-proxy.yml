Resources:
  rdsProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: ${self:custom.PROXY_NAME}
      EngineFamily: MYSQL
      RoleArn: !GetAtt rdsProxyRole.Arn
      Auth:
        - AuthScheme: SECRETS
          IAMAuth: DISABLED
          SecretArn: !Ref rdsSecret
      VpcSecurityGroupIds:
        - !Ref rdsSecurityGroup
      VpcSubnetIds:
        - !Ref subnetA
        - !Ref subnetC

  rdsProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      TargetGroupName: default
      DBProxyName: !Ref rdsProxy
      DBInstanceIdentifiers:
        - !Ref rdsInstance

  rdsProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - rds.amazonaws.com
      Policies:
        - PolicyName: RDSProxyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:*
                Resource: !Ref rdsSecret
              - Effect: Allow
                Action: "kms:Decrypt"
                Resource:
                  - Fn::Join:
                    - ':'
                    -
                      - 'arn:aws:kms'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'key/*'
                Condition:
                  StringEquals:
                    kms:ViaService: "secretsmanager.${self:provider.region}.amazonaws.com"